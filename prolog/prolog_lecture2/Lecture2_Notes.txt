/*
CMSC330 Organizations of Programming Languages
Fall 2016
Anwar Mamat

*/


/*  get the last item of a list */
first([],[]).
first([H|_],H).


/*  get the last item of a list */
last([L],L).
last([_|T],L):-last(T,L).



/* sum of a list  */
sum([],0).
sum([H|T], R):- sum(T, R2), R is H + R2.


/*
	tail recursive sum
*/
sum2(L,S):-sum2(L,0,S).
sum2([],A,A).
sum2([H|T],Acc, L2):- A is Acc+H, sum2(T,A,L2).



/*     Add 1 to each member of the list  */


add1([],[]).
add1([H|T],[H2|T2]):- H2 is H+1, add1(T,T2).


/*     Add N to each member of the list  */
addN([],_,[]).
addN([H|T],N,[H2|T2]):- H2 is H+N,addN(T,N,T2).

subN([],_,[]).
subN([H|T],N,[H2|T2]):- N is H2-H,sN(T,N,T2).


/* check if an item exists in a list */
my_member(X,[X|_]).
my_member(X,[_|T]):-my_member(X,T).


/* duplicate each item in a list */
/* dup([a,b,c],[a,a,b,b,c,c]).  */

dup([],[]).
dup([H|T],[H,H|T2]):- dup(T,T2).


/* get the length of a list */
my_length([],0).
my_length([_|T],R):-my_length(T,R2), R is R2+1.


/* get the item at position N */
at(1,[H|_],H).
at(N,[_|T],H):- N2 is N-1, at(N2,T,H).



/* split a list into two sublists */
split(L,0,[],L).
split([H|T],N,[H|T2],L2):- N2 is N-1, split(T,N2,T2,L2).


/* concatenate two lists */
my_concat([],L2,L2).
my_concat([H|T],L2,[H|T2]):-my_concat(T,L2,T2).


/*   reverse a list   (slow version) */

my_reverse([],[]).
my_reverse([X],[X]).
my_reverse([H|T], X):- my_reverse(T,L), append(L,[H],X).


/* append an item at the end of a list */
my_append([],Y,[Y]).
my_append([H|T],X,[H|Z]):- my_append(T,X,Z).


/* reverse a list (fast version) */
my_rev(X,F) :- rev_helper(X,[],F).
rev_helper([],A,A).
rev_helper([H|T],A,F) :-
    rev_helper(T,[H|A],F).


/*-------------------------------------------------
palindrome/1 - find whether list is a palindrome
*/
palindrome(L) :- reverse(L, L).


/* check if X is a suffix of Y */
suffix(X,Y):-append(_,X,Y).

/* check if X is a prefix of Y */
prefix(X,Y):-append(X,_,Y).

/* check if X is a sublist of Y */
sublist(X,Y):-
	suffix(X,Z),prefix(Z,Y).



/*
bogo sort
*/

my_takeout(E, [E|T], T).
my_takeout(E, [H|T], [H|T2]) :-
	my_takeout(E, T, T2).

my_permutation([], []).
my_permutation(L, [H|T]) :-
	my_takeout(H, L, R),
	my_permutation(R, T).

is_sorted([]).
is_sorted([_]).
is_sorted([X1,X2|T]):- X1 =< X2, is_sorted([X2|T]).

bogo_sort(X,Y):-my_permutation(X,Y),is_sorted(Y).




/*
merge two sorted lists
*/

merge(Xs,[],Xs).
merge([],Ys,Ys).
merge([X|Xs],[Y|Ys],[X|Zs]) :- X < Y, merge(Xs, [Y|Ys], Zs).
merge([X|Xs],[Y|Ys],[X,Y|Zs]) :- X = Y, merge(Xs, Ys, Zs).
merge([X|Xs],[Y|Ys],[Y|Zs]) :- X > Y, merge([X|Xs], Ys, Zs).



/*

Merge Sort

*/

merge2(X,[],X):-!.
merge2([],X,X):-!.
merge2([H1|T1],[H2|T2],[H1|T3]):-H1<H2, merge(T1,[H2|T2],T3).
merge2([H1|T1],[H2|T2],[H2|T3]):-H1>H2, merge([H1|T1],T2,T3).
merge2([H1|T1],[H2|T2],[H1,H2|T3]):-merge(T1,T2,T3).

halve2([],[],[]).
halve2([H],[H],[]).
halve2([H1,H2|T],[H1|T1],[H2|T2]):-halve2(T,T1,T2).


divide(L,L1,L2):-halve2(L,L1,L2).

merge_sort([],[]).     % empty list is already sorted
merge_sort([X],[X]).   % single element list is already sorted
merge_sort(List,Sorted):-
List=[_,_|_],divide(List,L1,L2),     % list with at least two elements is divided into two parts
merge_sort(L1,Sorted1),merge_sort(L2,Sorted2),  % then each part is sorted
merge2(Sorted1,Sorted2,Sorted).
